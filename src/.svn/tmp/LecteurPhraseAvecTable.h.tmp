#ifndef LECTEURPHRASEAVECTABLE_H_
#define LECTEURPHRASEAVECTABLE_H_

#include "LecteurSymbole.h"
#include "TableSymboles.h"
#include <string>
using namespace std;

class LecteurPhraseAvecTable {
public:
	LecteurPhraseAvecTable(string nomFich);	// Construit un lecteur de phrase pour vérifier
	                                        // la syntaxe du programme dans le fichier nomFich

	void analyse();   // Si le contenu du fichier est conforme à la grammaire,
	                  //   cette méthode se termine normalement et affiche un message "Syntaxe correcte".
                          //   la table des symboles (ts) aura été construite
	                  // Sinon, le programme sera interrompu (exit).
	inline TableSymboles getTs ()   { return ts; } // accesseur

private:
    LecteurSymbole ls;  // le lecteur de symboles utilisé pour analyser le fichier
    TableSymboles  ts;  // la table des symboles valués

    // implémentation de la grammaire
        void programme();   //   <programme> ::= debut <seqInst> fin <EOF>
        void seqInst();	    //     <seq_ins> ::= <inst> ; { <inst> ; }
        void inst();	    //        <inst> ::= <affectation> | <instSi> | <instTq> | <instRepeter>
        void affectation();	// <affectation> ::= <variable> = <expression> | <chaine>
        void expression();	//  <expression> ::= <terme> { <opAdd> <terme> }
        void facteur();     //     <facteur> ::= <entier>  |  <variable>  |  <opUnaire>  <expBool>  |  ( <expBool> )
        void opAdd();		// 		 <opAdd> ::= + | -
        void opMult();		//	    <opMult> ::= * | /
        void terme();		//		 <terme> ::= <facteur> { <opMult> <facteur> }
        void expBool();		//	   <expBool> ::= <termBool> { <opOu> <termBool> }
        void termBool();	//	  <termBool> ::= <relation> { <opEt> <relation> }
        void opOu();		//	    <opBool> ::= ou
        void opEt();		//	    <opBool> ::= ou
        void relation();	//	  <relation> ::= <expression> { <opRel> <expression> }
        void opRel();		//		 <opRel> ::= == | != | < | <= | > | >=
        void opUnaire();	//	  <opUnaire> ::= - | non

    	void instSi();		//.	    <instSi> ::= si ( <expBool> ) <seqInst> { sinonsi ( <expBool> ) <seqInst> }
    						//					[ sinon <seqInst> ] finsi
    	void instTq();		//.		<instTq> ::= tantque ( <expBool> ) <seqInst> fintantque
    	void instRepeter(); //. <instRepeter> ::= repeter <seqInst> jusqua ( <expBool> )
    	void instLire();	//	  <instLire> ::= lire ( <variable> )
    	void instEcrire();	//	<instEcrire> ::= ecrire ( <expression> | <chaine> )
    	void instPour();	//.	  <instPour> ::= pour ( <affectation>, <expBool> , <affectation>) <seqInst> finpour
<<<<<<< .mine
		void instSelonCas();
=======
    	void instSelonCas();//<instSelonCas> ::= seloncas (<variable>) { cas <entier> : <seqInst> } [defaut : <seqInst>] finselon
>>>>>>> .r40


    // outils pour se simplifier l'analyse syntaxique
    void testerSymCour (string ch);  // si symbole courant != ch, erreur : on arrete le programme, sinon rien
    void sauterSymCour (string ch);  // si symbole courant == ch, on passe au symbole suivant, sinon erreur : on arrete
    void erreur (string mess);      // affiche les message d'erreur mess et arrete le programme
};

#endif /* LECTEURPHRASEAVECTABLE_H_ */
